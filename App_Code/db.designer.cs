#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CAMS_NEW")]
public partial class dbDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAnnouncement(Announcement instance);
  partial void UpdateAnnouncement(Announcement instance);
  partial void DeleteAnnouncement(Announcement instance);
  partial void InsertCategory(Category instance);
  partial void UpdateCategory(Category instance);
  partial void DeleteCategory(Category instance);
  partial void InsertCATEGORY_USER(CATEGORY_USER instance);
  partial void UpdateCATEGORY_USER(CATEGORY_USER instance);
  partial void DeleteCATEGORY_USER(CATEGORY_USER instance);
  partial void InsertCourse(Course instance);
  partial void UpdateCourse(Course instance);
  partial void DeleteCourse(Course instance);
  partial void InsertCourseInstructorRelation(CourseInstructorRelation instance);
  partial void UpdateCourseInstructorRelation(CourseInstructorRelation instance);
  partial void DeleteCourseInstructorRelation(CourseInstructorRelation instance);
  partial void InsertDepartment(Department instance);
  partial void UpdateDepartment(Department instance);
  partial void DeleteDepartment(Department instance);
  partial void InsertInstructor(Instructor instance);
  partial void UpdateInstructor(Instructor instance);
  partial void DeleteInstructor(Instructor instance);
  partial void InsertStudent(Student instance);
  partial void UpdateStudent(Student instance);
  partial void DeleteStudent(Student instance);
  partial void InsertStudentCourseRelation(StudentCourseRelation instance);
  partial void UpdateStudentCourseRelation(StudentCourseRelation instance);
  partial void DeleteStudentCourseRelation(StudentCourseRelation instance);
  partial void InsertUSER(USER instance);
  partial void UpdateUSER(USER instance);
  partial void DeleteUSER(USER instance);
  partial void InsertUSERTYPE(USERTYPE instance);
  partial void UpdateUSERTYPE(USERTYPE instance);
  partial void DeleteUSERTYPE(USERTYPE instance);
  #endregion
	
	public dbDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CAMS_NEWConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public dbDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dbDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Announcement> Announcements
	{
		get
		{
			return this.GetTable<Announcement>();
		}
	}
	
	public System.Data.Linq.Table<Category> Categories
	{
		get
		{
			return this.GetTable<Category>();
		}
	}
	
	public System.Data.Linq.Table<CATEGORY_USER> CATEGORY_USERs
	{
		get
		{
			return this.GetTable<CATEGORY_USER>();
		}
	}
	
	public System.Data.Linq.Table<Course> Courses
	{
		get
		{
			return this.GetTable<Course>();
		}
	}
	
	public System.Data.Linq.Table<CourseInstructorRelation> CourseInstructorRelations
	{
		get
		{
			return this.GetTable<CourseInstructorRelation>();
		}
	}
	
	public System.Data.Linq.Table<Department> Departments
	{
		get
		{
			return this.GetTable<Department>();
		}
	}
	
	public System.Data.Linq.Table<Instructor> Instructors
	{
		get
		{
			return this.GetTable<Instructor>();
		}
	}
	
	public System.Data.Linq.Table<Student> Students
	{
		get
		{
			return this.GetTable<Student>();
		}
	}
	
	public System.Data.Linq.Table<StudentCourseRelation> StudentCourseRelations
	{
		get
		{
			return this.GetTable<StudentCourseRelation>();
		}
	}
	
	public System.Data.Linq.Table<USER> USERs
	{
		get
		{
			return this.GetTable<USER>();
		}
	}
	
	public System.Data.Linq.Table<USERTYPE> USERTYPEs
	{
		get
		{
			return this.GetTable<USERTYPE>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Announcement")]
public partial class Announcement : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Ann_Header;
	
	private string _TextFull;
	
	private System.DateTime _StartDate;
	
	private System.DateTime _FinishDate;
	
	private string _Location;
	
	private System.Nullable<int> _CourseID;
	
	private System.Nullable<int> _DeptID;
	
	private int _UserID;
	
	private int _CategoryType;
	
	private bool _IsActive;
	
	private EntityRef<Category> _Category;
	
	private EntityRef<Course> _Course;
	
	private EntityRef<Department> _Department;
	
	private EntityRef<Instructor> _Instructor;
	
	private EntityRef<Student> _Student;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAnn_HeaderChanging(string value);
    partial void OnAnn_HeaderChanged();
    partial void OnTextFullChanging(string value);
    partial void OnTextFullChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnFinishDateChanging(System.DateTime value);
    partial void OnFinishDateChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnCourseIDChanging(System.Nullable<int> value);
    partial void OnCourseIDChanged();
    partial void OnDeptIDChanging(System.Nullable<int> value);
    partial void OnDeptIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCategoryTypeChanging(int value);
    partial void OnCategoryTypeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
	
	public Announcement()
	{
		this._Category = default(EntityRef<Category>);
		this._Course = default(EntityRef<Course>);
		this._Department = default(EntityRef<Department>);
		this._Instructor = default(EntityRef<Instructor>);
		this._Student = default(EntityRef<Student>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ann_Header", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Ann_Header
	{
		get
		{
			return this._Ann_Header;
		}
		set
		{
			if ((this._Ann_Header != value))
			{
				this.OnAnn_HeaderChanging(value);
				this.SendPropertyChanging();
				this._Ann_Header = value;
				this.SendPropertyChanged("Ann_Header");
				this.OnAnn_HeaderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextFull", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string TextFull
	{
		get
		{
			return this._TextFull;
		}
		set
		{
			if ((this._TextFull != value))
			{
				this.OnTextFullChanging(value);
				this.SendPropertyChanging();
				this._TextFull = value;
				this.SendPropertyChanged("TextFull");
				this.OnTextFullChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="SmallDateTime NOT NULL")]
	public System.DateTime StartDate
	{
		get
		{
			return this._StartDate;
		}
		set
		{
			if ((this._StartDate != value))
			{
				this.OnStartDateChanging(value);
				this.SendPropertyChanging();
				this._StartDate = value;
				this.SendPropertyChanged("StartDate");
				this.OnStartDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishDate", DbType="SmallDateTime NOT NULL")]
	public System.DateTime FinishDate
	{
		get
		{
			return this._FinishDate;
		}
		set
		{
			if ((this._FinishDate != value))
			{
				this.OnFinishDateChanging(value);
				this.SendPropertyChanging();
				this._FinishDate = value;
				this.SendPropertyChanged("FinishDate");
				this.OnFinishDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(100)")]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int")]
	public System.Nullable<int> CourseID
	{
		get
		{
			return this._CourseID;
		}
		set
		{
			if ((this._CourseID != value))
			{
				if (this._Course.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCourseIDChanging(value);
				this.SendPropertyChanging();
				this._CourseID = value;
				this.SendPropertyChanged("CourseID");
				this.OnCourseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptID", DbType="Int")]
	public System.Nullable<int> DeptID
	{
		get
		{
			return this._DeptID;
		}
		set
		{
			if ((this._DeptID != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDeptIDChanging(value);
				this.SendPropertyChanging();
				this._DeptID = value;
				this.SendPropertyChanged("DeptID");
				this.OnDeptIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if ((this._Instructor.HasLoadedOrAssignedValue || this._Student.HasLoadedOrAssignedValue))
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryType", DbType="Int NOT NULL")]
	public int CategoryType
	{
		get
		{
			return this._CategoryType;
		}
		set
		{
			if ((this._CategoryType != value))
			{
				if (this._Category.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCategoryTypeChanging(value);
				this.SendPropertyChanging();
				this._CategoryType = value;
				this.SendPropertyChanged("CategoryType");
				this.OnCategoryTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Announcement", Storage="_Category", ThisKey="CategoryType", OtherKey="ID", IsForeignKey=true)]
	public Category Category
	{
		get
		{
			return this._Category.Entity;
		}
		set
		{
			Category previousValue = this._Category.Entity;
			if (((previousValue != value) 
						|| (this._Category.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category.Entity = null;
					previousValue.Announcements.Remove(this);
				}
				this._Category.Entity = value;
				if ((value != null))
				{
					value.Announcements.Add(this);
					this._CategoryType = value.ID;
				}
				else
				{
					this._CategoryType = default(int);
				}
				this.SendPropertyChanged("Category");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Announcement", Storage="_Course", ThisKey="CourseID", OtherKey="ID", IsForeignKey=true)]
	public Course Course
	{
		get
		{
			return this._Course.Entity;
		}
		set
		{
			Course previousValue = this._Course.Entity;
			if (((previousValue != value) 
						|| (this._Course.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Course.Entity = null;
					previousValue.Announcements.Remove(this);
				}
				this._Course.Entity = value;
				if ((value != null))
				{
					value.Announcements.Add(this);
					this._CourseID = value.ID;
				}
				else
				{
					this._CourseID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Course");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Announcement", Storage="_Department", ThisKey="DeptID", OtherKey="ID", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.Announcements.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.Announcements.Add(this);
					this._DeptID = value.ID;
				}
				else
				{
					this._DeptID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_Announcement", Storage="_Instructor", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
	public Instructor Instructor
	{
		get
		{
			return this._Instructor.Entity;
		}
		set
		{
			Instructor previousValue = this._Instructor.Entity;
			if (((previousValue != value) 
						|| (this._Instructor.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Instructor.Entity = null;
					previousValue.Announcements.Remove(this);
				}
				this._Instructor.Entity = value;
				if ((value != null))
				{
					value.Announcements.Add(this);
					this._UserID = value.ID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("Instructor");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Announcement", Storage="_Student", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
	public Student Student
	{
		get
		{
			return this._Student.Entity;
		}
		set
		{
			Student previousValue = this._Student.Entity;
			if (((previousValue != value) 
						|| (this._Student.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Student.Entity = null;
					previousValue.Announcements.Remove(this);
				}
				this._Student.Entity = value;
				if ((value != null))
				{
					value.Announcements.Add(this);
					this._UserID = value.ID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("Student");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _CategoryName;
	
	private System.Nullable<bool> _Durum;
	
	private EntitySet<Announcement> _Announcements;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnDurumChanging(System.Nullable<bool> value);
    partial void OnDurumChanged();
    #endregion
	
	public Category()
	{
		this._Announcements = new EntitySet<Announcement>(new Action<Announcement>(this.attach_Announcements), new Action<Announcement>(this.detach_Announcements));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string CategoryName
	{
		get
		{
			return this._CategoryName;
		}
		set
		{
			if ((this._CategoryName != value))
			{
				this.OnCategoryNameChanging(value);
				this.SendPropertyChanging();
				this._CategoryName = value;
				this.SendPropertyChanged("CategoryName");
				this.OnCategoryNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Durum", DbType="Bit")]
	public System.Nullable<bool> Durum
	{
		get
		{
			return this._Durum;
		}
		set
		{
			if ((this._Durum != value))
			{
				this.OnDurumChanging(value);
				this.SendPropertyChanging();
				this._Durum = value;
				this.SendPropertyChanged("Durum");
				this.OnDurumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Announcement", Storage="_Announcements", ThisKey="ID", OtherKey="CategoryType")]
	public EntitySet<Announcement> Announcements
	{
		get
		{
			return this._Announcements;
		}
		set
		{
			this._Announcements.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Announcements(Announcement entity)
	{
		this.SendPropertyChanging();
		entity.Category = this;
	}
	
	private void detach_Announcements(Announcement entity)
	{
		this.SendPropertyChanging();
		entity.Category = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CATEGORY_USER")]
public partial class CATEGORY_USER : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CategoryUserID;
	
	private System.Nullable<int> _UserID;
	
	private System.Nullable<int> _CategoryID;
	
	private EntityRef<USER> _USER;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryUserIDChanging(int value);
    partial void OnCategoryUserIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    #endregion
	
	public CATEGORY_USER()
	{
		this._USER = default(EntityRef<USER>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryUserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CategoryUserID
	{
		get
		{
			return this._CategoryUserID;
		}
		set
		{
			if ((this._CategoryUserID != value))
			{
				this.OnCategoryUserIDChanging(value);
				this.SendPropertyChanging();
				this._CategoryUserID = value;
				this.SendPropertyChanged("CategoryUserID");
				this.OnCategoryUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
	public System.Nullable<int> UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._USER.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
	public System.Nullable<int> CategoryID
	{
		get
		{
			return this._CategoryID;
		}
		set
		{
			if ((this._CategoryID != value))
			{
				this.OnCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._CategoryID = value;
				this.SendPropertyChanged("CategoryID");
				this.OnCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_CATEGORY_USER", Storage="_USER", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
	public USER USER
	{
		get
		{
			return this._USER.Entity;
		}
		set
		{
			USER previousValue = this._USER.Entity;
			if (((previousValue != value) 
						|| (this._USER.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._USER.Entity = null;
					previousValue.CATEGORY_USERs.Remove(this);
				}
				this._USER.Entity = value;
				if ((value != null))
				{
					value.CATEGORY_USERs.Add(this);
					this._UserID = value.UserID;
				}
				else
				{
					this._UserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("USER");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _CourseTitle;
	
	private string _CourseCode;
	
	private string _CourseDept;
	
	private short _Credit;
	
	private short _Semester;
	
	private int _AcademicYear;
	
	private EntitySet<Announcement> _Announcements;
	
	private EntitySet<CourseInstructorRelation> _CourseInstructorRelations;
	
	private EntitySet<StudentCourseRelation> _StudentCourseRelations;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCourseTitleChanging(string value);
    partial void OnCourseTitleChanged();
    partial void OnCourseCodeChanging(string value);
    partial void OnCourseCodeChanged();
    partial void OnCourseDeptChanging(string value);
    partial void OnCourseDeptChanged();
    partial void OnCreditChanging(short value);
    partial void OnCreditChanged();
    partial void OnSemesterChanging(short value);
    partial void OnSemesterChanged();
    partial void OnAcademicYearChanging(int value);
    partial void OnAcademicYearChanged();
    #endregion
	
	public Course()
	{
		this._Announcements = new EntitySet<Announcement>(new Action<Announcement>(this.attach_Announcements), new Action<Announcement>(this.detach_Announcements));
		this._CourseInstructorRelations = new EntitySet<CourseInstructorRelation>(new Action<CourseInstructorRelation>(this.attach_CourseInstructorRelations), new Action<CourseInstructorRelation>(this.detach_CourseInstructorRelations));
		this._StudentCourseRelations = new EntitySet<StudentCourseRelation>(new Action<StudentCourseRelation>(this.attach_StudentCourseRelations), new Action<StudentCourseRelation>(this.detach_StudentCourseRelations));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTitle", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string CourseTitle
	{
		get
		{
			return this._CourseTitle;
		}
		set
		{
			if ((this._CourseTitle != value))
			{
				this.OnCourseTitleChanging(value);
				this.SendPropertyChanging();
				this._CourseTitle = value;
				this.SendPropertyChanged("CourseTitle");
				this.OnCourseTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseCode", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string CourseCode
	{
		get
		{
			return this._CourseCode;
		}
		set
		{
			if ((this._CourseCode != value))
			{
				this.OnCourseCodeChanging(value);
				this.SendPropertyChanging();
				this._CourseCode = value;
				this.SendPropertyChanged("CourseCode");
				this.OnCourseCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseDept", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string CourseDept
	{
		get
		{
			return this._CourseDept;
		}
		set
		{
			if ((this._CourseDept != value))
			{
				this.OnCourseDeptChanging(value);
				this.SendPropertyChanging();
				this._CourseDept = value;
				this.SendPropertyChanged("CourseDept");
				this.OnCourseDeptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="SmallInt NOT NULL")]
	public short Credit
	{
		get
		{
			return this._Credit;
		}
		set
		{
			if ((this._Credit != value))
			{
				this.OnCreditChanging(value);
				this.SendPropertyChanging();
				this._Credit = value;
				this.SendPropertyChanged("Credit");
				this.OnCreditChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester", DbType="SmallInt NOT NULL")]
	public short Semester
	{
		get
		{
			return this._Semester;
		}
		set
		{
			if ((this._Semester != value))
			{
				this.OnSemesterChanging(value);
				this.SendPropertyChanging();
				this._Semester = value;
				this.SendPropertyChanged("Semester");
				this.OnSemesterChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYear", DbType="Int NOT NULL")]
	public int AcademicYear
	{
		get
		{
			return this._AcademicYear;
		}
		set
		{
			if ((this._AcademicYear != value))
			{
				this.OnAcademicYearChanging(value);
				this.SendPropertyChanging();
				this._AcademicYear = value;
				this.SendPropertyChanged("AcademicYear");
				this.OnAcademicYearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Announcement", Storage="_Announcements", ThisKey="ID", OtherKey="CourseID")]
	public EntitySet<Announcement> Announcements
	{
		get
		{
			return this._Announcements;
		}
		set
		{
			this._Announcements.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseInstructorRelation", Storage="_CourseInstructorRelations", ThisKey="ID", OtherKey="CourseID")]
	public EntitySet<CourseInstructorRelation> CourseInstructorRelations
	{
		get
		{
			return this._CourseInstructorRelations;
		}
		set
		{
			this._CourseInstructorRelations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentCourseRelation", Storage="_StudentCourseRelations", ThisKey="ID", OtherKey="CourseID")]
	public EntitySet<StudentCourseRelation> StudentCourseRelations
	{
		get
		{
			return this._StudentCourseRelations;
		}
		set
		{
			this._StudentCourseRelations.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Announcements(Announcement entity)
	{
		this.SendPropertyChanging();
		entity.Course = this;
	}
	
	private void detach_Announcements(Announcement entity)
	{
		this.SendPropertyChanging();
		entity.Course = null;
	}
	
	private void attach_CourseInstructorRelations(CourseInstructorRelation entity)
	{
		this.SendPropertyChanging();
		entity.Course = this;
	}
	
	private void detach_CourseInstructorRelations(CourseInstructorRelation entity)
	{
		this.SendPropertyChanging();
		entity.Course = null;
	}
	
	private void attach_StudentCourseRelations(StudentCourseRelation entity)
	{
		this.SendPropertyChanging();
		entity.Course = this;
	}
	
	private void detach_StudentCourseRelations(StudentCourseRelation entity)
	{
		this.SendPropertyChanging();
		entity.Course = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseInstructorRelation")]
public partial class CourseInstructorRelation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CourseID;
	
	private int _InstructorID;
	
	private EntityRef<Course> _Course;
	
	private EntityRef<Instructor> _Instructor;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnInstructorIDChanging(int value);
    partial void OnInstructorIDChanged();
    #endregion
	
	public CourseInstructorRelation()
	{
		this._Course = default(EntityRef<Course>);
		this._Instructor = default(EntityRef<Instructor>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CourseID
	{
		get
		{
			return this._CourseID;
		}
		set
		{
			if ((this._CourseID != value))
			{
				if (this._Course.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCourseIDChanging(value);
				this.SendPropertyChanging();
				this._CourseID = value;
				this.SendPropertyChanged("CourseID");
				this.OnCourseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int InstructorID
	{
		get
		{
			return this._InstructorID;
		}
		set
		{
			if ((this._InstructorID != value))
			{
				if (this._Instructor.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnInstructorIDChanging(value);
				this.SendPropertyChanging();
				this._InstructorID = value;
				this.SendPropertyChanged("InstructorID");
				this.OnInstructorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseInstructorRelation", Storage="_Course", ThisKey="CourseID", OtherKey="ID", IsForeignKey=true)]
	public Course Course
	{
		get
		{
			return this._Course.Entity;
		}
		set
		{
			Course previousValue = this._Course.Entity;
			if (((previousValue != value) 
						|| (this._Course.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Course.Entity = null;
					previousValue.CourseInstructorRelations.Remove(this);
				}
				this._Course.Entity = value;
				if ((value != null))
				{
					value.CourseInstructorRelations.Add(this);
					this._CourseID = value.ID;
				}
				else
				{
					this._CourseID = default(int);
				}
				this.SendPropertyChanged("Course");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_CourseInstructorRelation", Storage="_Instructor", ThisKey="InstructorID", OtherKey="ID", IsForeignKey=true)]
	public Instructor Instructor
	{
		get
		{
			return this._Instructor.Entity;
		}
		set
		{
			Instructor previousValue = this._Instructor.Entity;
			if (((previousValue != value) 
						|| (this._Instructor.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Instructor.Entity = null;
					previousValue.CourseInstructorRelations.Remove(this);
				}
				this._Instructor.Entity = value;
				if ((value != null))
				{
					value.CourseInstructorRelations.Add(this);
					this._InstructorID = value.ID;
				}
				else
				{
					this._InstructorID = default(int);
				}
				this.SendPropertyChanged("Instructor");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _DeptName;
	
	private System.Nullable<bool> _IsActive;
	
	private EntitySet<Announcement> _Announcements;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDeptNameChanging(string value);
    partial void OnDeptNameChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public Department()
	{
		this._Announcements = new EntitySet<Announcement>(new Action<Announcement>(this.attach_Announcements), new Action<Announcement>(this.detach_Announcements));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string DeptName
	{
		get
		{
			return this._DeptName;
		}
		set
		{
			if ((this._DeptName != value))
			{
				this.OnDeptNameChanging(value);
				this.SendPropertyChanging();
				this._DeptName = value;
				this.SendPropertyChanged("DeptName");
				this.OnDeptNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Announcement", Storage="_Announcements", ThisKey="ID", OtherKey="DeptID")]
	public EntitySet<Announcement> Announcements
	{
		get
		{
			return this._Announcements;
		}
		set
		{
			this._Announcements.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Announcements(Announcement entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_Announcements(Announcement entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Instructor")]
public partial class Instructor : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Title;
	
	private System.Nullable<bool> _PartTime;
	
	private string _SicilNo;
	
	private System.Nullable<bool> _BolumDisi;
	
	private System.Nullable<int> _UserID;
	
	private EntitySet<Announcement> _Announcements;
	
	private EntitySet<CourseInstructorRelation> _CourseInstructorRelations;
	
	private EntityRef<USER> _USER;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPartTimeChanging(System.Nullable<bool> value);
    partial void OnPartTimeChanged();
    partial void OnSicilNoChanging(string value);
    partial void OnSicilNoChanged();
    partial void OnBolumDisiChanging(System.Nullable<bool> value);
    partial void OnBolumDisiChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
	
	public Instructor()
	{
		this._Announcements = new EntitySet<Announcement>(new Action<Announcement>(this.attach_Announcements), new Action<Announcement>(this.detach_Announcements));
		this._CourseInstructorRelations = new EntitySet<CourseInstructorRelation>(new Action<CourseInstructorRelation>(this.attach_CourseInstructorRelations), new Action<CourseInstructorRelation>(this.detach_CourseInstructorRelations));
		this._USER = default(EntityRef<USER>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(30)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartTime", DbType="Bit")]
	public System.Nullable<bool> PartTime
	{
		get
		{
			return this._PartTime;
		}
		set
		{
			if ((this._PartTime != value))
			{
				this.OnPartTimeChanging(value);
				this.SendPropertyChanging();
				this._PartTime = value;
				this.SendPropertyChanged("PartTime");
				this.OnPartTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SicilNo", DbType="NVarChar(6)")]
	public string SicilNo
	{
		get
		{
			return this._SicilNo;
		}
		set
		{
			if ((this._SicilNo != value))
			{
				this.OnSicilNoChanging(value);
				this.SendPropertyChanging();
				this._SicilNo = value;
				this.SendPropertyChanged("SicilNo");
				this.OnSicilNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BolumDisi", DbType="Bit")]
	public System.Nullable<bool> BolumDisi
	{
		get
		{
			return this._BolumDisi;
		}
		set
		{
			if ((this._BolumDisi != value))
			{
				this.OnBolumDisiChanging(value);
				this.SendPropertyChanging();
				this._BolumDisi = value;
				this.SendPropertyChanged("BolumDisi");
				this.OnBolumDisiChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
	public System.Nullable<int> UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._USER.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_Announcement", Storage="_Announcements", ThisKey="ID", OtherKey="UserID")]
	public EntitySet<Announcement> Announcements
	{
		get
		{
			return this._Announcements;
		}
		set
		{
			this._Announcements.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instructor_CourseInstructorRelation", Storage="_CourseInstructorRelations", ThisKey="ID", OtherKey="InstructorID")]
	public EntitySet<CourseInstructorRelation> CourseInstructorRelations
	{
		get
		{
			return this._CourseInstructorRelations;
		}
		set
		{
			this._CourseInstructorRelations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_Instructor", Storage="_USER", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
	public USER USER
	{
		get
		{
			return this._USER.Entity;
		}
		set
		{
			USER previousValue = this._USER.Entity;
			if (((previousValue != value) 
						|| (this._USER.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._USER.Entity = null;
					previousValue.Instructors.Remove(this);
				}
				this._USER.Entity = value;
				if ((value != null))
				{
					value.Instructors.Add(this);
					this._UserID = value.UserID;
				}
				else
				{
					this._UserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("USER");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Announcements(Announcement entity)
	{
		this.SendPropertyChanging();
		entity.Instructor = this;
	}
	
	private void detach_Announcements(Announcement entity)
	{
		this.SendPropertyChanging();
		entity.Instructor = null;
	}
	
	private void attach_CourseInstructorRelations(CourseInstructorRelation entity)
	{
		this.SendPropertyChanging();
		entity.Instructor = this;
	}
	
	private void detach_CourseInstructorRelations(CourseInstructorRelation entity)
	{
		this.SendPropertyChanging();
		entity.Instructor = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _UserID;
	
	private string _StudentNumber;
	
	private System.Nullable<bool> _Mezun;
	
	private System.Nullable<bool> _DoubleMajor;
	
	private System.Nullable<bool> _DoubleMinor;
	
	private EntitySet<Announcement> _Announcements;
	
	private EntitySet<StudentCourseRelation> _StudentCourseRelations;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnStudentNumberChanging(string value);
    partial void OnStudentNumberChanged();
    partial void OnMezunChanging(System.Nullable<bool> value);
    partial void OnMezunChanged();
    partial void OnDoubleMajorChanging(System.Nullable<bool> value);
    partial void OnDoubleMajorChanged();
    partial void OnDoubleMinorChanging(System.Nullable<bool> value);
    partial void OnDoubleMinorChanged();
    #endregion
	
	public Student()
	{
		this._Announcements = new EntitySet<Announcement>(new Action<Announcement>(this.attach_Announcements), new Action<Announcement>(this.detach_Announcements));
		this._StudentCourseRelations = new EntitySet<StudentCourseRelation>(new Action<StudentCourseRelation>(this.attach_StudentCourseRelations), new Action<StudentCourseRelation>(this.detach_StudentCourseRelations));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
	public System.Nullable<int> UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentNumber", DbType="NVarChar(10)")]
	public string StudentNumber
	{
		get
		{
			return this._StudentNumber;
		}
		set
		{
			if ((this._StudentNumber != value))
			{
				this.OnStudentNumberChanging(value);
				this.SendPropertyChanging();
				this._StudentNumber = value;
				this.SendPropertyChanged("StudentNumber");
				this.OnStudentNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mezun", DbType="Bit")]
	public System.Nullable<bool> Mezun
	{
		get
		{
			return this._Mezun;
		}
		set
		{
			if ((this._Mezun != value))
			{
				this.OnMezunChanging(value);
				this.SendPropertyChanging();
				this._Mezun = value;
				this.SendPropertyChanged("Mezun");
				this.OnMezunChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoubleMajor", DbType="Bit")]
	public System.Nullable<bool> DoubleMajor
	{
		get
		{
			return this._DoubleMajor;
		}
		set
		{
			if ((this._DoubleMajor != value))
			{
				this.OnDoubleMajorChanging(value);
				this.SendPropertyChanging();
				this._DoubleMajor = value;
				this.SendPropertyChanged("DoubleMajor");
				this.OnDoubleMajorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoubleMinor", DbType="Bit")]
	public System.Nullable<bool> DoubleMinor
	{
		get
		{
			return this._DoubleMinor;
		}
		set
		{
			if ((this._DoubleMinor != value))
			{
				this.OnDoubleMinorChanging(value);
				this.SendPropertyChanging();
				this._DoubleMinor = value;
				this.SendPropertyChanged("DoubleMinor");
				this.OnDoubleMinorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Announcement", Storage="_Announcements", ThisKey="ID", OtherKey="UserID")]
	public EntitySet<Announcement> Announcements
	{
		get
		{
			return this._Announcements;
		}
		set
		{
			this._Announcements.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentCourseRelation", Storage="_StudentCourseRelations", ThisKey="ID", OtherKey="UserID")]
	public EntitySet<StudentCourseRelation> StudentCourseRelations
	{
		get
		{
			return this._StudentCourseRelations;
		}
		set
		{
			this._StudentCourseRelations.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Announcements(Announcement entity)
	{
		this.SendPropertyChanging();
		entity.Student = this;
	}
	
	private void detach_Announcements(Announcement entity)
	{
		this.SendPropertyChanging();
		entity.Student = null;
	}
	
	private void attach_StudentCourseRelations(StudentCourseRelation entity)
	{
		this.SendPropertyChanging();
		entity.Student = this;
	}
	
	private void detach_StudentCourseRelations(StudentCourseRelation entity)
	{
		this.SendPropertyChanging();
		entity.Student = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentCourseRelation")]
public partial class StudentCourseRelation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CourseID;
	
	private int _UserID;
	
	private EntityRef<Course> _Course;
	
	private EntityRef<Student> _Student;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
	
	public StudentCourseRelation()
	{
		this._Course = default(EntityRef<Course>);
		this._Student = default(EntityRef<Student>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CourseID
	{
		get
		{
			return this._CourseID;
		}
		set
		{
			if ((this._CourseID != value))
			{
				if (this._Course.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCourseIDChanging(value);
				this.SendPropertyChanging();
				this._CourseID = value;
				this.SendPropertyChanged("CourseID");
				this.OnCourseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._Student.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentCourseRelation", Storage="_Course", ThisKey="CourseID", OtherKey="ID", IsForeignKey=true)]
	public Course Course
	{
		get
		{
			return this._Course.Entity;
		}
		set
		{
			Course previousValue = this._Course.Entity;
			if (((previousValue != value) 
						|| (this._Course.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Course.Entity = null;
					previousValue.StudentCourseRelations.Remove(this);
				}
				this._Course.Entity = value;
				if ((value != null))
				{
					value.StudentCourseRelations.Add(this);
					this._CourseID = value.ID;
				}
				else
				{
					this._CourseID = default(int);
				}
				this.SendPropertyChanged("Course");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentCourseRelation", Storage="_Student", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
	public Student Student
	{
		get
		{
			return this._Student.Entity;
		}
		set
		{
			Student previousValue = this._Student.Entity;
			if (((previousValue != value) 
						|| (this._Student.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Student.Entity = null;
					previousValue.StudentCourseRelations.Remove(this);
				}
				this._Student.Entity = value;
				if ((value != null))
				{
					value.StudentCourseRelations.Add(this);
					this._UserID = value.ID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("Student");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[USER]")]
public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserID;
	
	private string _Name;
	
	private string _Surname;
	
	private System.Nullable<int> _DeptID;
	
	private System.Nullable<int> _UserTypeID;
	
	private string _Email;
	
	private string _Password;
	
	private System.Nullable<bool> _Durum;
	
	private EntitySet<CATEGORY_USER> _CATEGORY_USERs;
	
	private EntitySet<Instructor> _Instructors;
	
	private EntityRef<USERTYPE> _USERTYPE;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnDeptIDChanging(System.Nullable<int> value);
    partial void OnDeptIDChanged();
    partial void OnUserTypeIDChanging(System.Nullable<int> value);
    partial void OnUserTypeIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDurumChanging(System.Nullable<bool> value);
    partial void OnDurumChanged();
    #endregion
	
	public USER()
	{
		this._CATEGORY_USERs = new EntitySet<CATEGORY_USER>(new Action<CATEGORY_USER>(this.attach_CATEGORY_USERs), new Action<CATEGORY_USER>(this.detach_CATEGORY_USERs));
		this._Instructors = new EntitySet<Instructor>(new Action<Instructor>(this.attach_Instructors), new Action<Instructor>(this.detach_Instructors));
		this._USERTYPE = default(EntityRef<USERTYPE>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(25)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50)")]
	public string Surname
	{
		get
		{
			return this._Surname;
		}
		set
		{
			if ((this._Surname != value))
			{
				this.OnSurnameChanging(value);
				this.SendPropertyChanging();
				this._Surname = value;
				this.SendPropertyChanged("Surname");
				this.OnSurnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptID", DbType="Int")]
	public System.Nullable<int> DeptID
	{
		get
		{
			return this._DeptID;
		}
		set
		{
			if ((this._DeptID != value))
			{
				this.OnDeptIDChanging(value);
				this.SendPropertyChanging();
				this._DeptID = value;
				this.SendPropertyChanged("DeptID");
				this.OnDeptIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeID", DbType="Int")]
	public System.Nullable<int> UserTypeID
	{
		get
		{
			return this._UserTypeID;
		}
		set
		{
			if ((this._UserTypeID != value))
			{
				if (this._USERTYPE.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserTypeIDChanging(value);
				this.SendPropertyChanging();
				this._UserTypeID = value;
				this.SendPropertyChanged("UserTypeID");
				this.OnUserTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Durum", DbType="Bit")]
	public System.Nullable<bool> Durum
	{
		get
		{
			return this._Durum;
		}
		set
		{
			if ((this._Durum != value))
			{
				this.OnDurumChanging(value);
				this.SendPropertyChanging();
				this._Durum = value;
				this.SendPropertyChanged("Durum");
				this.OnDurumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_CATEGORY_USER", Storage="_CATEGORY_USERs", ThisKey="UserID", OtherKey="UserID")]
	public EntitySet<CATEGORY_USER> CATEGORY_USERs
	{
		get
		{
			return this._CATEGORY_USERs;
		}
		set
		{
			this._CATEGORY_USERs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_Instructor", Storage="_Instructors", ThisKey="UserID", OtherKey="UserID")]
	public EntitySet<Instructor> Instructors
	{
		get
		{
			return this._Instructors;
		}
		set
		{
			this._Instructors.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERTYPE_USER", Storage="_USERTYPE", ThisKey="UserTypeID", OtherKey="UserTypeID", IsForeignKey=true)]
	public USERTYPE USERTYPE
	{
		get
		{
			return this._USERTYPE.Entity;
		}
		set
		{
			USERTYPE previousValue = this._USERTYPE.Entity;
			if (((previousValue != value) 
						|| (this._USERTYPE.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._USERTYPE.Entity = null;
					previousValue.USERs.Remove(this);
				}
				this._USERTYPE.Entity = value;
				if ((value != null))
				{
					value.USERs.Add(this);
					this._UserTypeID = value.UserTypeID;
				}
				else
				{
					this._UserTypeID = default(Nullable<int>);
				}
				this.SendPropertyChanged("USERTYPE");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CATEGORY_USERs(CATEGORY_USER entity)
	{
		this.SendPropertyChanging();
		entity.USER = this;
	}
	
	private void detach_CATEGORY_USERs(CATEGORY_USER entity)
	{
		this.SendPropertyChanging();
		entity.USER = null;
	}
	
	private void attach_Instructors(Instructor entity)
	{
		this.SendPropertyChanging();
		entity.USER = this;
	}
	
	private void detach_Instructors(Instructor entity)
	{
		this.SendPropertyChanging();
		entity.USER = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USERTYPE")]
public partial class USERTYPE : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserTypeID;
	
	private string _UserType1;
	
	private System.Nullable<bool> _Durum;
	
	private EntitySet<USER> _USERs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserTypeIDChanging(int value);
    partial void OnUserTypeIDChanged();
    partial void OnUserType1Changing(string value);
    partial void OnUserType1Changed();
    partial void OnDurumChanging(System.Nullable<bool> value);
    partial void OnDurumChanged();
    #endregion
	
	public USERTYPE()
	{
		this._USERs = new EntitySet<USER>(new Action<USER>(this.attach_USERs), new Action<USER>(this.detach_USERs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UserTypeID
	{
		get
		{
			return this._UserTypeID;
		}
		set
		{
			if ((this._UserTypeID != value))
			{
				this.OnUserTypeIDChanging(value);
				this.SendPropertyChanging();
				this._UserTypeID = value;
				this.SendPropertyChanged("UserTypeID");
				this.OnUserTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="UserType", Storage="_UserType1", DbType="NVarChar(50)")]
	public string UserType1
	{
		get
		{
			return this._UserType1;
		}
		set
		{
			if ((this._UserType1 != value))
			{
				this.OnUserType1Changing(value);
				this.SendPropertyChanging();
				this._UserType1 = value;
				this.SendPropertyChanged("UserType1");
				this.OnUserType1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Durum", DbType="Bit")]
	public System.Nullable<bool> Durum
	{
		get
		{
			return this._Durum;
		}
		set
		{
			if ((this._Durum != value))
			{
				this.OnDurumChanging(value);
				this.SendPropertyChanging();
				this._Durum = value;
				this.SendPropertyChanged("Durum");
				this.OnDurumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERTYPE_USER", Storage="_USERs", ThisKey="UserTypeID", OtherKey="UserTypeID")]
	public EntitySet<USER> USERs
	{
		get
		{
			return this._USERs;
		}
		set
		{
			this._USERs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_USERs(USER entity)
	{
		this.SendPropertyChanging();
		entity.USERTYPE = this;
	}
	
	private void detach_USERs(USER entity)
	{
		this.SendPropertyChanging();
		entity.USERTYPE = null;
	}
}
#pragma warning restore 1591
